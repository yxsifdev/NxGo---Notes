// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  access        Boolean   @default(true)

  notes Note[]
  tags  Tag[]

  accounts Account[]
  sessions Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Note {
  id        String    @id @default(cuid())
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  content   String?
  repoUrl   String?
  archived  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tags      NoteTag[]

  @@map(name: "notes")
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  isCustom Boolean   @default(false)
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  notes    NoteTag[]

  @@unique([name, userId])
  @@map(name: "tags")
}

model NoteTag {
  id     String @id @default(cuid())
  noteId String
  tagId  String
  note   Note   @relation(fields: [noteId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@unique([noteId, tagId])
  @@map(name: "note_tags")
}
